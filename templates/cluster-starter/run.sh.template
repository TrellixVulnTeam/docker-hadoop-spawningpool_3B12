#!/bin/bash
# This script run cluster components in order
# All components is required to install agent.py in /scripts
# FYI agent.py is in base image
# TODO: Use puppet as modern approach

function wait_for_it()
{
    local serviceport=$1
    local service=${serviceport%%:*}
    local port=${serviceport#*:}
    local retry_seconds=1
    local max_try=500
    let i=1

    nc -z $service $port
    result=$?

    until [ $result -eq 0 ]; do
      echo "[$i/$max_try] ${service}:${port} is not available yet. Try in ${retry_seconds}s once again ..."
      if (( $i == $max_try )); then
        echo "[$i/$max_try] ${service}:${port} is still not available; giving up after ${max_try} tries. :/"
        exit 1
      fi

      let "i++"
      sleep $retry_seconds

      nc -z $service $port
      result=$?
    done
    echo "[$i/$max_try] $service:${port} is available."
}

AGENT_PORT={{additional["agent"]["port"]}}

function run_remote_script()
{
    local target_node=$1
    local target_script=$2
    echo "Running $target_script in $target_node..."
    curl -XPOST -s "http://${target_node}${target_script}" || exit -1
}

function wait_agent()
{
    local agent_addr=$1
    wait_for_it $agent_addr
    echo "Agent in $agent_addr is now running!"
}

function wait_files_in_hdfs()
{
    local file_path=$1
    local grep_text=$2
    local retry_seconds=$3
    local max_try=$4
    local i=0
    local file_in_hdfs=`hdfs dfs -ls $file_path 2> /dev/null  | grep $grep_text`
    until [ "$file_in_hdfs" != "" ]; do
      echo "$file_in_hdfs is not available in HDFS yet. Try in ${retry_seconds}s once again ..."
      if (( $i == $max_try )); then
        echo "$file_in_hdfs is not available in HDFS is still not available; giving up after ${max_try} tries. :/"
        exit 1
      fi

      let "i++"
      sleep $retry_seconds

      file_in_hdfs=`hdfs dfs -ls $file_path 2> /dev/null  | grep $grep_text`
    done
    echo "$file_in_hdfs is now available in HDFS."
}

# Run Journal and Zookeeper Node
echo "Trying to run Journal and Zookeeper nodes..."
JOURNAL_RUN_SCRIPT="/scripts/run_journal.sh"
JOURNAL_PORT={{hosts["journalnode"]["port"]}}
ZOOKEEPER_RUN_SCRIPT="/scripts/run_zookeeper.sh"
ZOOKEEPER_PORT={{hosts["zookeeper"]["port"]}}
JOURNAL_NODES=("{{ hosts["journalnode"]["host"] | join("\" \"") }}")
ZOOKEEPER_NODES=("{{ hosts["zookeeper"]["host"] | join("\" \"") }}")

for node in "${JOURNAL_NODES[@]}"; do
    agent_addr="$node:$AGENT_PORT"
    wait_agent $agent_addr
    run_remote_script $agent_addr $JOURNAL_RUN_SCRIPT
    run_remote_script $agent_addr $ZOOKEEPER_RUN_SCRIPT
done
for node in "${ZOOKEEPER_NODES[@]}"; do
    agent_addr="$node:$AGENT_PORT"
    wait_agent $agent_addr
    run_remote_script $agent_addr $ZOOKEEPER_RUN_SCRIPT
done

for node in "${JOURNAL_NODES[@]}"; do
    wait_for_it "$node:$JOURNAL_PORT"
done
for node in "${ZOOKEEPER_NODES[@]}"; do
    wait_for_it "$node:$ZOOKEEPER_PORT"
done
echo "All journal and zookeeper have been up!"

# Run Namenodes
NAMENODE_PORT={{hosts["primary-namenode"]["rpc-port"]}}
# Run Active Namenode
echo "Trying to run namenode(active)..."
ACTIVE_NAMENODE="{{hosts["primary-namenode"]["host"]}}"
STANDBY_NAMENODE="{{hosts["secondary-namenode"]["host"]}}"
nn1_agent_addr="$ACTIVE_NAMENODE:$AGENT_PORT"
wait_agent $nn1_agent_addr
run_remote_script $nn1_agent_addr "/scripts/run_active_nn.sh"
wait_for_it "$ACTIVE_NAMENODE:$NAMENODE_PORT"

# Run Standby Namenode
echo "Trying to run namenode(standby)..."
nn2_agent_addr="$STANDBY_NAMENODE:$AGENT_PORT"
wait_agent $nn2_agent_addr
run_remote_script $nn2_agent_addr "/scripts/run_standby_nn.sh"
wait_for_it "$STANDBY_NAMENODE:$NAMENODE_PORT"
echo "All namenode have been up!"

# Run Datanodes and node manager
DATANODE_PORT={{hosts["datanode"]["rpc-port"]}}
NODEMANAGER_PORT={{hosts["datanode"]["nodemanager-port"]}}
echo "Trying to run datanode/nodemanager..."
DATA_NODES=("{{ hosts["datanode"]["host"] | join("\" \"")}}")
for node in "${DATA_NODES[@]}"; do
    agent_addr="$node:$AGENT_PORT"
    wait_agent $agent_addr
    run_remote_script $agent_addr "/scripts/run_datanode.sh"
    run_remote_script $agent_addr "/scripts/run_nodemanager.sh"
done
for node in "${DATA_NODES[@]}"; do
    wait_for_it "$node:$DATANODE_PORT"
    wait_for_it "$node:$NODEMANAGER_PORT"
done
echo "All datanode/nodemanager have been up!"

# Run Resourcemanager
RM_PORT={{hosts["resource-manager"]["port"]}}
RM_ADDR="{{ hosts["resource-manager"]["host"] }}"
echo "Trying to run resourcemanager..."
agent_addr="$RM_ADDR:$AGENT_PORT"
wait_agent $agent_addr
run_remote_script $agent_addr "/scripts/run_rm.sh"

# Initializing hdfs related(leaving safe-mode, create user, upload files in HDFS...)
run_remote_script "$STANDBY_NAMENODE:$AGENT_PORT" "/scripts/initialize.sh"
echo "Mandatory files is being uploaded to HDFS"

wait_for_it "$RM_ADDR:$RM_PORT"
echo "Resource manager has been up!"

# Run Yarn HistoryServer
YARN_HS_ADDR="{{hosts["yarn-history"]["host"]}}"
YARN_HS_PORT={{hosts["yarn-history"]["port"]}}
echo "Trying to run yarn historyserver..."
agent_addr="$YARN_HS_ADDR:$AGENT_PORT"
wait_agent $agent_addr
run_remote_script $agent_addr "/scripts/run_yarn_hs.sh"

wait_for_it "$YARN_HS_ADDR:$YARN_HS_PORT"
echo "Yarn history server has been up!"

{% if hosts["hive-metastore"] %}
# Run Hive metastore
wait_for_it "{{hosts["hive-metastore"]["metastore-db-host"]}}:{{hosts["hive-metastore"]["metastore-db-port"]}}" # Wait until metastore db up
HMS_HOST="{{hosts["hive-metastore"]["host"]}}"
HMS_PORT={{hosts["hive-metastore"]["thrift-port"]}}
echo "Trying to run hive-metastore..."
agent_addr="$HMS_HOST:$AGENT_PORT"
wait_agent $agent_addr
run_remote_script $agent_addr "/scripts/run_hive_metastore.sh"
wait_for_it "$HMS_HOST:$HMS_PORT"
echo "Hive metastore has been up!"

# Run hive server
HIVE_SERVER_ADDR="{{hosts["hive-server"]["host"]}}"
HIVE_SERVER_PORT={{hosts["hive-server"]["thrift-port"]}}
echo "Trying to run hive server..."
agent_addr="$HIVE_SERVER_ADDR:$AGENT_PORT"
wait_agent $agent_addr
run_remote_script $agent_addr "/scripts/run_hive_server.sh"
wait_for_it "$HIVE_SERVER_ADDR:$HIVE_SERVER_PORT"
echo "Hive server has been up!"
{% endif %}


# Run Spark HistoryServer
SPARK_HS_ADDR="{{hosts["spark-history"]["host"]}}"
SPARK_HS_PORT={{hosts["spark-history"]["port"]}}
echo "Trying to run spark historyserver..."
agent_addr="$SPARK_HS_ADDR:$AGENT_PORT"
wait_agent $agent_addr
run_remote_script $agent_addr "/scripts/run_history_server.sh"

wait_for_it "$SPARK_HS_ADDR:$SPARK_HS_PORT"
echo "Spark history server has been up!"


# Run Spark thrift server
SPARK_THRIFT_ADDR="{{hosts["spark-thrift"]["host"]}}"
SPARK_THRIFT_PORT={{hosts["spark-thrift"]["port"]}}
echo "Trying to run spark thrift server..."
agent_addr="$SPARK_THRIFT_ADDR:$AGENT_PORT"
wait_agent $agent_addr
run_remote_script $agent_addr "/scripts/run_thrift_server.sh"
wait_for_it "$SPARK_THRIFT_ADDR:$SPARK_THRIFT_PORT"
echo "Spark thrift server has been up!"

# Run Hue
HUE_ADDR="{{hosts["hue"]["host"]}}"
HUE_PORT={{hosts["hue"]["port"]}}
echo "Running hue..."
agent_addr="$HUE_ADDR:$AGENT_PORT"
wait_agent $agent_addr
run_remote_script $agent_addr "/scripts/run_hue.sh"
wait_for_it "$HUE_ADDR:$HUE_PORT"
echo "Hue has been up!"

exit 0
